{"version":3,"sources":["Input.js","service/persons.js","Notification.js","ErrorNotification.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","newvalue","handleronchange","value","onChange","baseUrl","axios","get","then","response","data","newObjet","post","id","newObject","put","Notification","message","className","ErrorNotification","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","showAll","setShowAll","successMessage","setSuccesMessage","errorMessage","setErrorMessage","useEffect","console","log","personService","initialpersons","personToShow","toggleImportanceOf","person","find","num","changedNumber","number","returneNumber","map","catch","error","name","setTimeout","filter","n","includes","event","target","onSubmit","preventDefault","personObjet","alert","returnedPerson","concat","type","nom","i","onClick","window","confirm","delete","val","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.722e476b.chunk.js","sourcesContent":["//import React, { useState } from 'react'\r\n\r\n\r\nconst Input = (props) =>{\r\nconst {newvalue,handleronchange} = props;\r\nreturn(\r\n\r\n    <input  value = {newvalue} onChange = {handleronchange} />\r\n)\r\n\r\n}\r\nexport default Input;","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n//const baseUrl = 'http://localhost:3001/api/persons';\r\nconst getAll = () =>{\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst create = newObjet =>{\r\n    const request = axios.post(baseUrl,newObjet);\r\n    return request.then(response => response.data)\r\n}\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  \r\n  export default {getAll,create,update}","import React from 'react';\r\n\r\nconst Notification = ({message}) =>{\r\n    if(message === null){\r\n        return null\r\n    }\r\n    return(\r\n        <div className='successe'>\r\n          {message}\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import React from 'react';\r\n\r\nconst ErrorNotification = ({message}) =>{\r\n    if(message === null){\r\n        return null\r\n    }\r\n    return(\r\n        <div className='error'>\r\n          {message}\r\n        </div>\r\n    )\r\n}\r\nexport default ErrorNotification ;","import React, { useState, useEffect } from 'react'\nimport Input from './Input'\nimport personService from './service/persons'\nimport axios from 'axios';\nimport Person from './Person';\nimport Notification from './Notification';\nimport ErrorNotification from './ErrorNotification';\n\nconst App = (props) => {\n\n   const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('');\n  const [newNumber,setNewNumber] = useState('');\n  const [showAll ,setShowAll] = useState('')\n  const [successMessage , setSuccesMessage] = useState('Display message succes')\n  const [errorMessage, setErrorMessage ] = useState('some error happened...')\n const effet=() => {\n      console.log('effect');\n      personService\n        .getAll()\n        .then(initialpersons =>{\n          setPersons(initialpersons);\n         })\n    }\n     useEffect(effet,[])\n\n    let personToShow = persons; \n     const handlePersonChange = (event) =>{\n       setNewName(event.target.value)\n    }\n\n    const handleNumber = (event) =>{\n       setNewNumber(event.target.value)\n    }\n\n    const toggleImportanceOf = (id) => {\n      const person = persons.find(num => num.id === id)\n      const changedNumber = { ...person, newNumber: persons.number }\n    \n    personService\n      .update(id,changedNumber)\n      .then(returneNumber =>{\n         setPersons(persons.map(number => \n          number.id !== id? number : returneNumber))\n  })\n  .catch(error=> {\n    setErrorMessage(\n      `the name '${persons.name}\n    ' was already deleted from server`\n    )\n\n    /*alert(`the name '${persons.name}\n  //  ' was already deleted from server`\n    )*/\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n\n      setPersons(persons.filter(n => n.id !== id))\n  })\n}\n\n  const addPerson = (event) =>{\n     \n     event.preventDefault()\n     const personObjet = {\n       name:newName,\n       number:newNumber,\n     }\n\n     const incudePerson = persons.map(value => value.name)\n\n    if(incudePerson.includes(newName)){\n       alert(`${newName} is already added to phonebook`);\n       toggleImportanceOf(persons.id)\n       setNewName('');\n         setNewNumber('');\n      }\n      else{\n       personService\n        .create(personObjet)\n        .then(returnedPerson =>{\n           setPersons(persons.concat(returnedPerson));\n           setSuccesMessage(\n              `Added'${newName} successe`\n             )  \n           setNewName('');\n           setNewNumber('')\n        setTimeout(() => {\n          setSuccesMessage(null)\n        }, 5000)\n    }) \n   }\n  }\n\n   const handlerfilter = (event) =>{\n     setShowAll(event.target.value)\n       }\n\n   \n    \n    if(showAll){\n      const showFiltre = persons.filter(value =>value.name.includes(showAll));\n      personToShow = showFiltre;\n    }\n\n\n    const handlerClickDelete = (id) =>{\n      axios\n      .delete(`http://localhost:3001/persons/${id}`)\n      .then(response =>{ \n          setPersons(persons.filter(val => val.id !== id));\n          setNewName('');\n          setNewNumber('');\n          console.log('respose data',response.data)       })\n        .catch(error=>  {\n\n          setErrorMessage( error.message)\n          setTimeout(() => {\n            setErrorMessage(null)\n            console.log('erro',error)\n          }, 5000)\n\n    })  \n  }\n  return (\n    <div>\n\n<div>\n        filter shown with <Input \n                 newvalue ={showAll}\n                 handleronchange ={handlerfilter}\n                 />\n        </div>\n      <h2>Phonebook</h2>\n        <Notification message ={successMessage} />\n      <form onSubmit ={addPerson}>\n        <div>\n          name: <Input \n                 newvalue ={newName}\n                 handleronchange ={handlePersonChange}\n                 />\n        </div>\n        <div>\n          Number: <Input \n                 newvalue ={newNumber}\n                 handleronchange ={handleNumber}\n                 />\n        </div>\n        <button  type ='submit'>\n\n        {personToShow.map((nom,i) =>{\n          <Person \n          key={i}\n          toggleName ={() => toggleImportanceOf(nom.id)}\n          label ='add'\n          />\n        })\n        }\n         add\n        </button>\n      </form>\n      <h2>Numbers</h2>\n\n      <div>\n        {personToShow.map((nom,i) =>\n          <p key={i}>{ nom.name}  {nom.number} \n             <button  onClick={ () => {\n                if(window.confirm(`delete  ${nom.name} ?`)) {\n                  handlerClickDelete(nom.id)\n                }\n              }\n            }\n        >delete</button>\n        </p>)}\n      </div>\n  <ErrorNotification   message={errorMessage} />\n    </div>\n  )\n\n}\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}